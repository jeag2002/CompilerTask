
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 24 14:45:19 CET 2014
//----------------------------------------------------

package pac2;

import java_cup.*;
import java_cup.runtime.*;
import pac2.*;
import pac2.utils.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 24 14:45:19 CET 2014
  */
public class Pac2Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Pac2Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Pac2Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Pac2Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\010\000\002\003\003\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\002\000\002\007\012\000\002\010\004\000\002\010\002" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\002\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\007\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\012\000\002\014\012\000\002\014" +
    "\012\000\002\014\012\000\002\014\014\000\002\014\014" +
    "\000\002\014\014\000\002\014\014\000\002\017\004\000" +
    "\002\017\002\000\002\017\003\000\002\015\004\000\002" +
    "\015\002\000\002\016\004\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\010\002\uffff\003\005\004\007\001\002\000" +
    "\010\002\uffff\003\005\004\007\001\002\000\010\002\ufffd" +
    "\003\ufffd\004\ufffd\001\002\000\004\002\171\001\002\000" +
    "\004\007\010\001\002\000\004\005\011\001\002\000\024" +
    "\003\015\006\ufffb\013\ufffb\014\014\015\016\016\021\017" +
    "\ufffb\020\012\022\017\001\002\000\004\007\170\001\002" +
    "\000\024\003\015\006\ufffb\013\ufffb\014\014\015\016\016" +
    "\021\017\ufffb\020\012\022\017\001\002\000\004\007\166" +
    "\001\002\000\024\003\ufff5\006\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\001\002\000\024" +
    "\003\ufffa\006\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\022\ufffa\001\002\000\024\003\ufff6\006\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022" +
    "\ufff6\001\002\000\010\006\ufff2\013\024\017\025\001\002" +
    "\000\004\007\022\001\002\000\024\003\ufff7\006\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\001\002\000\010\006\ufff2\013\024\017\025\001\002\000" +
    "\010\006\ufff2\013\024\017\025\001\002\000\004\007\030" +
    "\001\002\000\004\006\027\001\002\000\010\002\ufffe\003" +
    "\ufffe\004\ufffe\001\002\000\004\023\031\001\002\000\016" +
    "\003\033\014\034\016\036\020\032\024\uffef\025\040\001" +
    "\002\000\004\007\163\001\002\000\016\003\uffea\014\uffea" +
    "\016\uffea\020\uffea\024\uffea\025\uffea\001\002\000\004\007" +
    "\162\001\002\000\004\024\043\001\002\000\004\007\042" +
    "\001\002\000\016\003\033\014\034\016\036\020\032\024" +
    "\uffef\025\040\001\002\000\016\003\uffeb\014\uffeb\016\uffeb" +
    "\020\uffeb\024\uffeb\025\uffeb\001\002\000\004\024\ufff0\001" +
    "\002\000\016\003\uffed\014\uffed\016\uffed\020\uffed\024\uffed" +
    "\025\uffed\001\002\000\004\005\044\001\002\000\026\003" +
    "\053\006\uffe7\007\046\013\051\014\057\016\054\020\045" +
    "\022\055\025\050\027\047\001\002\000\026\003\uffe4\006" +
    "\uffe4\007\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\022\uffe4" +
    "\025\uffe4\027\uffe4\001\002\000\030\003\uffe3\006\uffe3\007" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\020\uffe3\021\110\022\uffe3" +
    "\025\uffe3\027\uffe3\001\002\000\004\023\064\001\002\000" +
    "\026\003\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2\016\uffe2" +
    "\020\uffe2\022\uffe2\025\uffe2\027\uffe2\001\002\000\032\003" +
    "\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf\016\uffdf\020\uffdf" +
    "\022\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002\000" +
    "\026\003\053\006\uffe7\007\046\013\051\014\057\016\054" +
    "\020\045\022\055\025\050\027\047\001\002\000\026\003" +
    "\uffe0\006\uffe0\007\uffe0\013\uffe0\014\uffe0\016\uffe0\020\uffe0" +
    "\022\uffe0\025\uffe0\027\uffe0\001\002\000\026\003\uffe5\006" +
    "\uffe5\007\uffe5\013\uffe5\014\uffe5\016\uffe5\020\uffe5\022\uffe5" +
    "\025\uffe5\027\uffe5\001\002\000\026\003\uffe1\006\uffe1\007" +
    "\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\022\uffe1\025\uffe1" +
    "\027\uffe1\001\002\000\004\006\062\001\002\000\026\003" +
    "\uffe6\006\uffe6\007\uffe6\013\uffe6\014\uffe6\016\uffe6\020\uffe6" +
    "\022\uffe6\025\uffe6\027\uffe6\001\002\000\026\003\053\006" +
    "\uffe7\007\046\013\051\014\057\016\054\020\045\022\055" +
    "\025\050\027\047\001\002\000\004\006\uffe9\001\002\000" +
    "\010\006\ufff1\013\ufff1\017\ufff1\001\002\000\004\006\uffe8" +
    "\001\002\000\012\007\070\010\065\011\067\012\066\001" +
    "\002\000\012\003\071\011\074\024\uffce\026\075\001\002" +
    "\000\012\003\071\011\074\024\uffce\026\075\001\002\000" +
    "\012\003\071\011\074\024\uffce\026\075\001\002\000\012" +
    "\003\071\011\074\024\uffce\026\075\001\002\000\014\003" +
    "\uffc9\011\uffc9\022\uffc9\024\uffc9\026\uffc9\001\002\000\004" +
    "\024\102\001\002\000\014\003\071\011\074\022\uffce\024" +
    "\uffce\026\075\001\002\000\014\003\uffcb\011\uffcb\022\uffcb" +
    "\024\uffcb\026\uffcb\001\002\000\010\007\100\010\076\012" +
    "\077\001\002\000\014\003\uffcc\011\uffcc\022\uffcc\024\uffcc" +
    "\026\uffcc\001\002\000\014\003\uffca\011\uffca\022\uffca\024" +
    "\uffca\026\uffca\001\002\000\014\003\uffcd\011\uffcd\022\uffcd" +
    "\024\uffcd\026\uffcd\001\002\000\006\022\uffcf\024\uffcf\001" +
    "\002\000\004\032\103\001\002\000\016\003\105\007\107" +
    "\013\051\027\047\030\uffd1\031\uffd1\001\002\000\016\003" +
    "\105\007\107\013\051\027\047\030\uffd1\031\uffd1\001\002" +
    "\000\006\030\uffd0\031\uffd0\001\002\000\006\030\126\031" +
    "\125\001\002\000\004\021\110\001\002\000\012\007\114" +
    "\010\111\011\113\012\112\001\002\000\012\003\071\011" +
    "\074\022\uffce\026\075\001\002\000\012\003\071\011\074" +
    "\022\uffce\026\075\001\002\000\012\003\071\011\074\022" +
    "\uffce\026\075\001\002\000\012\003\071\011\074\022\uffce" +
    "\026\075\001\002\000\004\022\116\001\002\000\032\003" +
    "\uffde\006\uffde\007\uffde\013\uffde\014\uffde\016\uffde\020\uffde" +
    "\022\uffde\025\uffde\027\uffde\030\uffde\031\uffde\001\002\000" +
    "\004\022\120\001\002\000\032\003\uffdc\006\uffdc\007\uffdc" +
    "\013\uffdc\014\uffdc\016\uffdc\020\uffdc\022\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\001\002\000\004\022\122\001\002" +
    "\000\032\003\uffdb\006\uffdb\007\uffdb\013\uffdb\014\uffdb\016" +
    "\uffdb\020\uffdb\022\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\001\002\000\004\022\124\001\002\000\032\003\uffdd\006" +
    "\uffdd\007\uffdd\013\uffdd\014\uffdd\016\uffdd\020\uffdd\022\uffdd" +
    "\025\uffdd\027\uffdd\030\uffdd\031\uffdd\001\002\000\032\003" +
    "\uffda\006\uffda\007\uffda\013\uffda\014\uffda\016\uffda\020\uffda" +
    "\022\uffda\025\uffda\027\uffda\030\uffda\031\uffda\001\002\000" +
    "\014\003\105\007\107\013\051\027\047\031\uffd1\001\002" +
    "\000\004\031\130\001\002\000\032\003\uffd6\006\uffd6\007" +
    "\uffd6\013\uffd6\014\uffd6\016\uffd6\020\uffd6\022\uffd6\025\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\001\002\000\006\030\uffd2\031" +
    "\uffd2\001\002\000\004\024\133\001\002\000\004\032\134" +
    "\001\002\000\016\003\105\007\107\013\051\027\047\030" +
    "\uffd1\031\uffd1\001\002\000\006\030\137\031\136\001\002" +
    "\000\032\003\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8\016" +
    "\uffd8\020\uffd8\022\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\001\002\000\014\003\105\007\107\013\051\027\047\031" +
    "\uffd1\001\002\000\004\031\141\001\002\000\032\003\uffd4" +
    "\006\uffd4\007\uffd4\013\uffd4\014\uffd4\016\uffd4\020\uffd4\022" +
    "\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\001\002\000\004" +
    "\024\143\001\002\000\004\032\144\001\002\000\016\003" +
    "\105\007\107\013\051\027\047\030\uffd1\031\uffd1\001\002" +
    "\000\006\030\147\031\146\001\002\000\032\003\uffd7\006" +
    "\uffd7\007\uffd7\013\uffd7\014\uffd7\016\uffd7\020\uffd7\022\uffd7" +
    "\025\uffd7\027\uffd7\030\uffd7\031\uffd7\001\002\000\014\003" +
    "\105\007\107\013\051\027\047\031\uffd1\001\002\000\004" +
    "\031\151\001\002\000\032\003\uffd3\006\uffd3\007\uffd3\013" +
    "\uffd3\014\uffd3\016\uffd3\020\uffd3\022\uffd3\025\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\001\002\000\004\024\153\001\002\000" +
    "\004\032\154\001\002\000\016\003\105\007\107\013\051" +
    "\027\047\030\uffd1\031\uffd1\001\002\000\006\030\157\031" +
    "\156\001\002\000\032\003\uffd9\006\uffd9\007\uffd9\013\uffd9" +
    "\014\uffd9\016\uffd9\020\uffd9\022\uffd9\025\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\001\002\000\014\003\105\007\107\013\051" +
    "\027\047\031\uffd1\001\002\000\004\031\161\001\002\000" +
    "\032\003\uffd5\006\uffd5\007\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\020\uffd5\022\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\001" +
    "\002\000\016\003\uffee\014\uffee\016\uffee\020\uffee\024\uffee" +
    "\025\uffee\001\002\000\016\003\uffec\014\uffec\016\uffec\020" +
    "\uffec\024\uffec\025\uffec\001\002\000\004\006\ufff3\001\002" +
    "\000\004\006\ufff4\001\002\000\024\003\ufff8\006\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8" +
    "\001\002\000\010\006\ufffc\013\ufffc\017\ufffc\001\002\000" +
    "\024\003\ufff9\006\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\022\ufff9\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\005\003\003\001\001\000\006\002" +
    "\171\003\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\017\005" +
    "\012\001\001\000\002\001\001\000\006\004\166\005\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\025\007\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\164\007" +
    "\022\001\001\000\006\006\163\007\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\034\011\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\040\011\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\055\013\057\014\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\062\013\057\014\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\060" +
    "\013\057\014\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\151" +
    "\016\072\001\001\000\006\015\141\016\072\001\001\000" +
    "\006\015\131\016\072\001\001\000\006\015\071\016\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\100\016\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\103\017\105" +
    "\001\001\000\006\014\103\017\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\122\016\072\001\001\000\006\015\120\016" +
    "\072\001\001\000\006\015\116\016\072\001\001\000\006" +
    "\015\114\016\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\103\017\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\103\017\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\103\017" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\103\017\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\103" +
    "\017\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\103\017\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\103\017\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Pac2Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Pac2Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Pac2Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	
		public static Hashtable parameter;
		public static Hashtable variables;
		
		
		public static Data datVar;
		public static Data datPam;
		public static Data datAttrib;
		
		public static int errorsAnal;
		
		
		public static Hashtable results;
		
		public static void printResults(int erroresLexicos){
			
			System.out.println("Errores lexicos " + erroresLexicos);
			System.out.println("Errores de analisis " + errorsAnal);
			
			System.out.println("[KEY]\t \t([IDENT]\t[SOURCE]\t[TYPE]\t\t[SCOPE]\t)");
			Enumeration en = results.keys();
			while(en.hasMoreElements()) { 
				
				String key = (String) en.nextElement(); 
				Data dat = (Data)results.get(key);
				System.out.println(key + "\t=\t(" + dat.toString() + ")");
				
			} 
			
		}
		
		
		public static void setData(Data dat, Hashtable table){
			if (!table.containsKey(dat.ident)){
				table.put(dat.ident, dat);
			}
		}
		
		
		public static void processHashToFinal(Hashtable parameter, Hashtable variables, Hashtable results, String name_class){
		
		//parameters
		
		
			Enumeration en = parameter.keys();
			
			while(en.hasMoreElements()) { 
				
				String key = (String) en.nextElement(); 
				Data dat = (Data)parameter.get(key);
				dat.scope = name_class;
				results.put(key,dat);	
		  	} 
		
		//variables
		
			en = variables.keys();
			
			while(en.hasMoreElements()) { 
				
				String key = (String) en.nextElement(); 
				Data dat = (Data)variables.get(key);
				dat.scope = name_class;
				results.put(key,dat);	
		  	}
		
		}
		

		
		public static void main(String[] args) throws Exception {
		
		System.out.println("------------------------------------------");
		System.out.println("JLEX analisis INI						  ");
		System.out.println("------------------------------------------");
	
		if (args.length == 1){
		
			errorsAnal = 0;
			
			FileReader fr = new FileReader(new File(args[0]));
			
			results = new Hashtable();
			parameter = new Hashtable();
			variables = new Hashtable();
			
			datVar = new Data();
			datPam = new Data();
			datAttrib = new Data();
			
			Yylex yylex = new Yylex(fr);
			Pac2Cup par = new Pac2Cup(yylex);
			par.parse();
			
			System.out.println("fichero " + args[0] + " procesado! ");
			printResults(yylex.contador);
			
		}else{
			System.out.println("No hay los parametros necesarios");
		}
	
	
		System.out.println("------------------------------------------");
		System.out.println("JLEX analisis FIN						  ");
		System.out.println("------------------------------------------");
	
	
	}	
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Pac2Cup$actions {
  private final Pac2Cup parser;

  /** Constructor */
  CUP$Pac2Cup$actions(Pac2Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Pac2Cup$do_action(
    int                        CUP$Pac2Cup$act_num,
    java_cup.runtime.lr_parser CUP$Pac2Cup$parser,
    java.util.Stack            CUP$Pac2Cup$stack,
    int                        CUP$Pac2Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Pac2Cup$result;

      /* select the action based on the action number */
      switch (CUP$Pac2Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sum ::= error 
            {
              Object RESULT =null;
		 Pac2Cup.errorsAnal++;  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sum",12, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sum ::= TK_OP TK_LITERAL 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sum",12, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sum ::= TK_NUMBERMAS 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sum",12, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sum ::= TK_OP TK_NUMBER 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sum",12, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sum ::= TK_OP TK_WORD 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sum",12, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sumas ::= 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sumas",11, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sumas ::= sum sumas 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("sumas",11, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifefs ::= error 
            {
              Object RESULT =null;
		 Pac2Cup.errorsAnal++;  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("ifefs",13, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifefs ::= 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("ifefs",13, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ifefs ::= cod ifefs 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("ifefs",13, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cod ::= TK_IF TK_PAROPEN TK_LITERAL sumas TK_PARCLOSE TK_THEN ifefs TK_ELSE ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cod ::= TK_IF TK_PAROPEN TK_NUMBERMAS sumas TK_PARCLOSE TK_THEN ifefs TK_ELSE ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cod ::= TK_IF TK_PAROPEN TK_NUMBER sumas TK_PARCLOSE TK_THEN ifefs TK_ELSE ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cod ::= TK_IF TK_PAROPEN TK_WORD sumas TK_PARCLOSE TK_THEN ifefs TK_ELSE ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cod ::= TK_IF TK_PAROPEN TK_LITERAL sumas TK_PARCLOSE TK_THEN ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cod ::= TK_IF TK_PAROPEN TK_NUMBERMAS sumas TK_PARCLOSE TK_THEN ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cod ::= TK_IF TK_PAROPEN TK_NUMBER sumas TK_PARCLOSE TK_THEN ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cod ::= TK_IF TK_PAROPEN TK_WORD sumas TK_PARCLOSE TK_THEN ifefs TK_ENDIF 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cod ::= TK_WORD TK_ASIG TK_LITERAL sumas TK_DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cod ::= TK_WORD TK_ASIG TK_NUMBERMAS sumas TK_DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cod ::= TK_WORD TK_ASIG TK_NUMBER sumas TK_DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cod ::= TK_WORD TK_ASIG TK_WORD sumas TK_DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cod ::= TK_COMENTARIO 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("cod",10, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var ::= error 
            {
              Object RESULT =null;
		 Pac2Cup.errorsAnal++;  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var ::= TK_DOTCOMMA 
            {
              Object RESULT =null;
		  Pac2Cup.datVar.source = "Variable"; 
 		 			      Pac2Cup.setData(Pac2Cup.datVar, Pac2Cup.variables);  
 		 			      String type = Pac2Cup.datVar.type; 
 		 			      Pac2Cup.datVar = new Data(); 
 		 			      Pac2Cup.datVar.type = type;
 		 			      
 		 				
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var ::= TK_COMMA 
            {
              Object RESULT =null;
		  Pac2Cup.datVar.source = "Variable"; 
 		 			   Pac2Cup.setData(Pac2Cup.datVar, Pac2Cup.variables);  
 		 			   String type = Pac2Cup.datVar.type; 
 		 			   Pac2Cup.datVar = new Data();
 		 			   Pac2Cup.datVar.type = type;
 		 		   
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var ::= TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		 
 		                  String name =  ((pac2.symbol)word).lex; 
 		 				  Pac2Cup.datVar.ident = name; 
 		 			   
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var ::= TK_BOOLEAN 
            {
              Object RESULT =null;
		  Pac2Cup.datVar.type = "Boolean"; 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var ::= TK_STRING 
            {
              Object RESULT =null;
		 Pac2Cup.datVar.type = "String"; 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var ::= TK_INTEGER 
            {
              Object RESULT =null;
		  Pac2Cup.datVar.type = "Integer"; 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variables ::= 
            {
              Object RESULT =null;
		  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= cod variables 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= var variables 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= error 
            {
              Object RESULT =null;
		 Pac2Cup.errorsAnal++;  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= TK_COMMA 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= TK_BOOLEAN TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		 
										
										String name =  ((pac2.symbol)word).lex; 
										Pac2Cup.datPam.ident = name;
										Pac2Cup.datPam.source = "Parameter";
										Pac2Cup.datPam.type = "Boolean";
										Pac2Cup.setData(Pac2Cup.datPam, Pac2Cup.parameter);
										Pac2Cup.datPam = new Data();
										
										 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= TK_STRING TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		
				
										String name =  ((pac2.symbol)word).lex; 
										Pac2Cup.datPam.ident = name;
										Pac2Cup.datPam.source = "Parameter";
										Pac2Cup.datPam.type = "String";
										Pac2Cup.setData(Pac2Cup.datPam, Pac2Cup.parameter);
										Pac2Cup.datPam = new Data();	 
											
										
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= TK_INTEGER TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		 
										
										String name =  ((pac2.symbol)word).lex; 
										Pac2Cup.datPam.ident = name;
										Pac2Cup.datPam.source = "Parameter";
										Pac2Cup.datPam.type = "Integer";
										Pac2Cup.setData(Pac2Cup.datPam, Pac2Cup.parameter);
										Pac2Cup.datPam = new Data(); 
										
										
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters ::= 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= param parameters 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= TK_CONSTRUCTOR TK_WORD TK_PAROPEN parameters TK_PARCLOSE TK_BEGIN variables TK_END 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-6)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-6)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-6)).value;
		

String name_class =  ((pac2.symbol)word).lex;
Pac2Cup.processHashToFinal(Pac2Cup.parameter,Pac2Cup.variables,Pac2Cup.results,name_class);
Pac2Cup.parameter.clear();
Pac2Cup.variables.clear();
Pac2Cup.parameter = new Hashtable();
Pac2Cup.variables = new Hashtable();

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedures ::= 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedures ::= TK_COMENTARIO procedures 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedures ::= function procedures 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // attributes ::= error 
            {
              Object RESULT =null;
		 Pac2Cup.errorsAnal++;  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("attributes",3, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attributes ::= TK_DOTCOMMA 
            {
              Object RESULT =null;
		 
					Pac2Cup.results.put(Pac2Cup.datAttrib.ident,Pac2Cup.datAttrib);
					Pac2Cup.datAttrib = new Data();
				
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("attributes",3, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // attributes ::= TK_STRING TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		 
					String name = ((pac2.symbol)word).lex; 
				 	Pac2Cup.datAttrib.ident = name;
				 	Pac2Cup.datAttrib.type = "String";
				 	Pac2Cup.datAttrib.source = "Attribute";
				
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("attributes",3, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // attributes ::= TK_INTEGER TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		 
				 	String name = ((pac2.symbol)word).lex; 
				 	Pac2Cup.datAttrib.ident = name;
				 	Pac2Cup.datAttrib.type = "Integer";
				 	Pac2Cup.datAttrib.source = "Attribute";
				
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("attributes",3, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // attributes ::= TK_BOOLEAN TK_WORD 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.peek()).value;
		 
					String name = ((pac2.symbol)word).lex; 
					Pac2Cup.datAttrib.ident = name;
					Pac2Cup.datAttrib.type = "Boolean";
					Pac2Cup.datAttrib.source = "Attribute";
				
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("attributes",3, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // attributes ::= TK_PUBLIC 
            {
              Object RESULT =null;
		 Pac2Cup.datAttrib.scope = "Public"; 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("attributes",3, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("global",2, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global ::= attributes global 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("global",2, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= error 
            {
              Object RESULT =null;
		 Pac2Cup.errorsAnal++;  
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= TK_CLASS TK_WORD TK_BEGIN global procedures TK_END 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-4)).value;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= 
            {
              Object RESULT =null;
		 
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)).value;
		RESULT = start_val;
              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Pac2Cup$parser.done_parsing();
          return CUP$Pac2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= program file 
            {
              Object RESULT =null;

              CUP$Pac2Cup$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.elementAt(CUP$Pac2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Pac2Cup$stack.peek()), RESULT);
            }
          return CUP$Pac2Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

